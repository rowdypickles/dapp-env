{"ast":null,"code":"import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer\n});\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\nconst store = configureStore();\nexport default store;","map":{"version":3,"names":["applyMiddleware","compose","createStore","combineReducers","thunk","blockchainReducer","dataReducer","rootReducer","blockchain","data","middleware","composeEnhancers","configureStore","store"],"sources":["/Users/drallek/Desktop/Cryptosphere/hashlips_nft_minting_dapp/src/redux/store.js"],"sourcesContent":["import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,OAAO,EAAEC,WAAW,EAAEC,eAAe,QAAQ,OAAO;AAC9E,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,WAAW,MAAM,oBAAoB;AAE5C,MAAMC,WAAW,GAAGJ,eAAe,CAAC;EAClCK,UAAU,EAAEH,iBAAiB;EAC7BI,IAAI,EAAEH;AACR,CAAC,CAAC;AAEF,MAAMI,UAAU,GAAG,CAACN,KAAK,CAAC;AAC1B,MAAMO,gBAAgB,GAAGV,OAAO,CAACD,eAAe,CAAC,GAAGU,UAAU,CAAC,CAAC;AAEhE,MAAME,cAAc,GAAG,MAAM;EAC3B,OAAOV,WAAW,CAACK,WAAW,EAAEI,gBAAgB,CAAC;AACnD,CAAC;AAED,MAAME,KAAK,GAAGD,cAAc,EAAE;AAE9B,eAAeC,KAAK"},"metadata":{},"sourceType":"module"}