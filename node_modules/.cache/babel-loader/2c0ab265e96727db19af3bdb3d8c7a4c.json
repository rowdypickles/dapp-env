{"ast":null,"code":"// log\nimport store from \"../store\";\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n    try {\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(fetchDataSuccess({\n        totalSupply\n        // cost,\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","totalSupply","getState","blockchain","smartContract","methods","call","err","console","log"],"sources":["/Users/drallek/Desktop/Cryptosphere/RowdyPickles/dapp-env/src/redux/data/dataActions.js"],"sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(\n        fetchDataSuccess({\n          totalSupply,\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,UAAU;AAE5B,MAAMC,gBAAgB,GAAG,MAAM;EAC7B,OAAO;IACLC,IAAI,EAAE;EACR,CAAC;AACH,CAAC;AAED,MAAMC,gBAAgB,GAAIC,OAAO,IAAK;EACpC,OAAO;IACLF,IAAI,EAAE,oBAAoB;IAC1BE,OAAO,EAAEA;EACX,CAAC;AACH,CAAC;AAED,MAAMC,eAAe,GAAID,OAAO,IAAK;EACnC,OAAO;IACLF,IAAI,EAAE,mBAAmB;IACzBE,OAAO,EAAEA;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAM;EAC7B,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAACN,gBAAgB,EAAE,CAAC;IAC5B,IAAI;MACF,IAAIO,WAAW,GAAG,MAAMR,KAAK,CAC1BS,QAAQ,EAAE,CACVC,UAAU,CAACC,aAAa,CAACC,OAAO,CAACJ,WAAW,EAAE,CAC9CK,IAAI,EAAE;MACT;MACA;MACA;MACA;;MAEAN,QAAQ,CACNJ,gBAAgB,CAAC;QACfK;QACA;MACF,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBP,QAAQ,CAACF,eAAe,CAAC,oCAAoC,CAAC,CAAC;IACjE;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}