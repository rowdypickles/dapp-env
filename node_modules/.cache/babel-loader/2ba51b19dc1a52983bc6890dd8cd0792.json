{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchData } from \"../data/dataActions\";\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\"\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          }));\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3EthContract","Web3","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","ethereum","window","metamaskIsInstalled","isMetaMask","setProvider","web3","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME","err"],"sources":["/Users/drallek/Desktop/Cryptosphere/hashlips_nft_minting_dapp/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}